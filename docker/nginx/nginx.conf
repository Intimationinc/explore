# Define the cache location
#proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=backend_cache:10m max_size=1g inactive=60m use_temp_path=off;

# Define the upstream backend servers using the Docker service name
upstream backend_servers {
    # This will resolve to all the replicas of the backend service running in Docker
    server backend:8081 max_fails=1 fail_timeout=5s;
    # Add more servers as needed if you scale your backend service further
    server backend:8082 max_fails=1 fail_timeout=5s;
    server backend:8083 max_fails=1 fail_timeout=5s;
}

server {
    listen 80;

    location / {

        # Enable caching for proxy responses
        
        # proxy_cache backend_cache;
        # proxy_cache_key $host$request_uri;
        # proxy_cache_valid 200 301 302 10m;  # Cache 200, 301, 302 responses for 10 minutes
        # proxy_cache_valid 404 1m;           # Cache 404 responses for 1 minute
        # proxy_cache_use_stale error timeout invalid_header http_500 http_502 http_503 http_504;

        # Proxy pass to the backend service replicas
        proxy_pass http://backend_servers;
        proxy_set_header X-Backend-Server $upstream_addr;

        # Set headers to preserve the original client information
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # Allow Nginx to try the next upstream server in case of certain errors
        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
    }

    # Define the error and access logs
    error_log /var/log/nginx/error.log;
    access_log /var/log/nginx/access.log;
}
